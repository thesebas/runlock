#!/usr/bin/php
<?php

use Ulrichsg\Getopt\Getopt;
use Ulrichsg\Getopt\Option;

require_once __DIR__ . '/vendor/autoload.php';


$getopt = new Getopt([
    (new Option('a', 'action', Getopt::REQUIRED_ARGUMENT))
        ->setDefaultValue("lock")
        ->setDescription('lock or unlock [default: lock]'),
    (new Option('l', 'lockname', Getopt::REQUIRED_ARGUMENT))
        ->setDescription('lock name'),
    (new Option('n', 'count', Getopt::REQUIRED_ARGUMENT))
        ->setDefaultValue(1)
        ->setDescription('how many locks can be acquired [default: 1]'),
    (new Option('c', 'config', Getopt::REQUIRED_ARGUMENT))
        ->setDefaultValue('/etc/runlock/config.ini')
        ->setDescription('path to file with params in .ini format [default: /etc/runlock/config.ini]'),
    (new Option('v', 'verbose', Getopt::NO_ARGUMENT))
        ->setDescription('verbose mode'),
    (new Option('h', 'help'))
        ->setDescription("show help"),
]);

function dump($vars, $label = "vars") {
    fprintf(STDERR, "%s:\n%s\n", $label, var_export($vars, true));
}

function usage($msg = null, $exitcode = 0) {

    global $getopt;
    if (!is_null($msg)) {
        fprintf(STDERR, "error: $msg\n");
    }

    fprintf(STDERR, $getopt->getHelpText());

    die($exitcode);
}

$banner = <<<BANNER
%s <options>
    acquire/free lock
    
    exit codes:
    0 - lock acquired
    1 - failed acquiring lock
    2 - other error
BANNER;

$getopt->setBanner($banner . PHP_EOL . PHP_EOL);

try {
    $getopt->parse();
} catch (UnexpectedValueException $e) {
    usage($e->getMessage(), 2);
}

$getopt['help'] and usage();

$verbose = $getopt['verbose'] ? true : false;
$action = @$getopt['action'] or usage("missing action", 2);
$lockname = $getopt['lockname'] or usage('missing lockname', 2);
$configfile = $getopt['config'] or usage('missing lockname', 2);
$count = $getopt['count'] or usage('missing count', 2);
$count = intval($count);

$verbose and dump([
    'verbose' => $verbose,
    'action' => $action,
    'lockname' => $lockname,
    'count' => $count,
    'configfile' => $configfile
]);

file_exists($configfile) or usage("config file [$configfile] not ofund", 2);

$config = parse_ini_file($configfile);

$verbose and dump($config);

$mongo = new \MongoDB\Client($config['mongo']['host']);


$dbName = $config['mongo']['dbName'];
$collectionName = $config['mongo']['collectionName'];

$locks = $mongo->selectCollection($dbName, $collectionName);

$lock = function ($name, $count = 1) use ($locks) {
    $filter = [
        '_id' => $name,
        'count' => ['$lt' => intval($count)]
    ];
    $update = [
        '$inc' => ['count' => 1]
    ];
    $opts = ['upsert' => true];
    try {
        $updateResult = $locks->updateOne($filter, $update, $opts);
        return $updateResult->getUpsertedCount() > 0 || $updateResult->getModifiedCount() > 0;
    } catch (\Exception $e) {
        return false;
    }
};


$unlock = function ($name) use ($locks) {
    $filter = [
        '_id' => $name,
        'count' => ['$gt' => 0]
    ];
    $update = [
        '$inc' => ['count' => -1]
    ];

    $updateResult = $locks->updateOne($filter, $update);

    return $updateResult->getModifiedCount() > 0;
};


switch ($action) {
    default:
    case 'lock':
        $res = $lock($lockname, $count);
        break;
    case 'unlock':
        $res = $unlock($lockname, $count);
        break;
}

if (!$res) {
    exit(1);
}

exit(0);