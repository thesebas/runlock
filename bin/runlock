#!/usr/bin/php
<?php

use Ulrichsg\Getopt\Getopt;
use Ulrichsg\Getopt\Option;

foreach ([__DIR__ . '/../../autoload.php',
             __DIR__ . '/../vendor/autoload.php',
             __DIR__ . '/vendor/autoload.php'] as $file) {
    if (file_exists($file)) {
        define('PHPUNIT_COMPOSER_INSTALL', $file);

        break;
    }
}

require PHPUNIT_COMPOSER_INSTALL;

$getopt = new Getopt([
    (new Option('a', 'action', Getopt::REQUIRED_ARGUMENT))
        ->setDefaultValue("lock")
        ->setDescription('lock or unlock [default: lock]'),
    (new Option('l', 'lockname', Getopt::REQUIRED_ARGUMENT))
        ->setDescription('lock name'),
    (new Option('n', 'count', Getopt::REQUIRED_ARGUMENT))
        ->setDefaultValue(1)
        ->setDescription('how many locks can be acquired [default: 1]'),
    (new Option('d', 'delay', Getopt::REQUIRED_ARGUMENT))
        ->setDescription('delay running script rand(0, n) seconds')
        ->setDefaultValue(0)
        ->setValidation('is_numeric'),
    (new Option('c', 'config', Getopt::REQUIRED_ARGUMENT))
        ->setDefaultValue('/etc/runlock/config.ini')
        ->setDescription('path to file with params in .ini format [default: /etc/runlock/config.ini]'),
    (new Option('v', 'verbose', Getopt::NO_ARGUMENT))
        ->setDescription('verbose mode'),
    (new Option('h', 'help'))
        ->setDescription("show help"),
]);

function dump($vars, $label = "vars") {
    fprintf(STDERR, "%s:\n%s\n", $label, var_export($vars, true));
}

function usage($msg = null, $exitcode = 0) {

    global $getopt;
    if (!is_null($msg)) {
        fprintf(STDERR, "error: $msg\n");
    }

    fprintf(STDERR, $getopt->getHelpText());

    die($exitcode);
}

$banner = <<<BANNER
%s <options>
    acquire/free lock
    
    exit codes:
    0 - lock acquired
    1 - failed acquiring lock
    2 - other error
BANNER;

$getopt->setBanner($banner . PHP_EOL . PHP_EOL);

try {
    $getopt->parse();
} catch (UnexpectedValueException $e) {
    usage($e->getMessage(), 2);
}

$getopt['help'] and usage();

$verbose = @$getopt['verbose'] ? true : false;
$action = @$getopt['action'] or usage("missing action", 2);
$lockname = $getopt['lockname'] or usage('missing lockname', 2);
$configfile = $getopt['config'] or usage('missing lockname', 2);
$count = $getopt['count'] or usage('missing count', 2);
$delay = @$getopt['delay'];
$randDelay = $delay ? rand(0, $delay) : false;
$count = intval($count);

$verbose and dump([
    'verbose' => $verbose,
    'action' => $action,
    'lockname' => $lockname,
    'count' => $count,
    'delay' => $delay,
    'randDelay' => $randDelay,
    'configfile' => $configfile
]);

file_exists($configfile) or usage("config file [$configfile] not ofund", 2);

$config = parse_ini_file($configfile, true);

$verbose and dump($config);

if ($randDelay) {
    sleep($randDelay);
}

$lock = new \thesebas\runlock\Lock($config);

switch ($action) {
    default:
    case 'lock':
        $res = $lock->lock($lockname, $count);
        break;
    case 'unlock':
        $res = $lock->unlock($lockname);
        break;
}

if (!$res) {
    exit(1);
}

exit(0);